/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StepState } from "./utils/stepper";
export namespace Components {
    interface JplHorizontalStepper {
    }
    interface JplStep {
        "component": "button" | "anchor";
        /**
          * If there was an error, you can display an error message under the step
         */
        "errorMessage": string;
        /**
          * Internal property that displays the step number IF no `state` is added
         */
        "index": number;
        /**
          * Internal property to check if this step is the first step
         */
        "isFirst": boolean;
        /**
          * Internal property to check if this step is the last step
         */
        "isLast": boolean;
        /**
          * Plain text label of the step
         */
        "label": string;
        /**
          * Values used if the component is set as type "button"
         */
        "name": string;
        /**
          * Syntactically displays a text underneath the label which says "Optional"
         */
        "optional": boolean;
        /**
          * Pass a URL the step should route to (this route is added to an href in an anchor tag) For example, say we have a url: https://jpl.nasa.gov For step one we need to pass the `route` attribute: https://jpl.nasa.gov/form/step1 For step two: https://jpl.nasa.gov/form/step2  If you do not add a route attribute, the step will not be active So this is a good way of preventing users from skipping steps
         */
        "route": string;
        /**
          * Current state of the step. Defaults to 'number'. Available states are: - number (default) - edit (displays pencil icon) - done (displays checkmark icon) - error (displays warning icon)  This property can also intake any Ionicon icon name instead. For example, add the ionicon "add" icon to show a (+) icon
         */
        "state": StepState;
        "value": string;
    }
    interface JplStepHeader {
        "active": boolean;
        "errorMessage": string;
        "index": number;
        "label": string;
        "optional": boolean;
        "selected": boolean;
        "state": StepState;
    }
}
declare global {
    interface HTMLJplHorizontalStepperElement extends Components.JplHorizontalStepper, HTMLStencilElement {
    }
    var HTMLJplHorizontalStepperElement: {
        prototype: HTMLJplHorizontalStepperElement;
        new (): HTMLJplHorizontalStepperElement;
    };
    interface HTMLJplStepElement extends Components.JplStep, HTMLStencilElement {
    }
    var HTMLJplStepElement: {
        prototype: HTMLJplStepElement;
        new (): HTMLJplStepElement;
    };
    interface HTMLJplStepHeaderElement extends Components.JplStepHeader, HTMLStencilElement {
    }
    var HTMLJplStepHeaderElement: {
        prototype: HTMLJplStepHeaderElement;
        new (): HTMLJplStepHeaderElement;
    };
    interface HTMLElementTagNameMap {
        "jpl-horizontal-stepper": HTMLJplHorizontalStepperElement;
        "jpl-step": HTMLJplStepElement;
        "jpl-step-header": HTMLJplStepHeaderElement;
    }
}
declare namespace LocalJSX {
    interface JplHorizontalStepper {
    }
    interface JplStep {
        "component"?: "button" | "anchor";
        /**
          * If there was an error, you can display an error message under the step
         */
        "errorMessage"?: string;
        /**
          * Internal property that displays the step number IF no `state` is added
         */
        "index"?: number;
        /**
          * Internal property to check if this step is the first step
         */
        "isFirst"?: boolean;
        /**
          * Internal property to check if this step is the last step
         */
        "isLast"?: boolean;
        /**
          * Plain text label of the step
         */
        "label"?: string;
        /**
          * Values used if the component is set as type "button"
         */
        "name"?: string;
        /**
          * Syntactically displays a text underneath the label which says "Optional"
         */
        "optional"?: boolean;
        /**
          * Pass a URL the step should route to (this route is added to an href in an anchor tag) For example, say we have a url: https://jpl.nasa.gov For step one we need to pass the `route` attribute: https://jpl.nasa.gov/form/step1 For step two: https://jpl.nasa.gov/form/step2  If you do not add a route attribute, the step will not be active So this is a good way of preventing users from skipping steps
         */
        "route"?: string;
        /**
          * Current state of the step. Defaults to 'number'. Available states are: - number (default) - edit (displays pencil icon) - done (displays checkmark icon) - error (displays warning icon)  This property can also intake any Ionicon icon name instead. For example, add the ionicon "add" icon to show a (+) icon
         */
        "state"?: StepState;
        "value"?: string;
    }
    interface JplStepHeader {
        "active"?: boolean;
        "errorMessage"?: string;
        "index"?: number;
        "label"?: string;
        "optional"?: boolean;
        "selected"?: boolean;
        "state"?: StepState;
    }
    interface IntrinsicElements {
        "jpl-horizontal-stepper": JplHorizontalStepper;
        "jpl-step": JplStep;
        "jpl-step-header": JplStepHeader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jpl-horizontal-stepper": LocalJSX.JplHorizontalStepper & JSXBase.HTMLAttributes<HTMLJplHorizontalStepperElement>;
            "jpl-step": LocalJSX.JplStep & JSXBase.HTMLAttributes<HTMLJplStepElement>;
            "jpl-step-header": LocalJSX.JplStepHeader & JSXBase.HTMLAttributes<HTMLJplStepHeaderElement>;
        }
    }
}
